import os
from datetime import datetime

def create_ci_cd_files(project_path: str, project_name: str):
    print(f"[+] Generating CI/CD files for project: {project_name}")

    os.makedirs(os.path.join(project_path, ".github", "workflows"), exist_ok=True)
    os.makedirs(os.path.join(project_path, "tests"), exist_ok=True)
    os.makedirs(os.path.join(project_path, "config"), exist_ok=True)

    # README
    with open(os.path.join(project_path, "README.md"), "w") as f:
        f.write(f"# {project_name}\n\nGenerated by ZeroDev AI.\n")

    # LICENSE
    year = datetime.now().year
    with open(os.path.join(project_path, "LICENSE"), "w") as f:
        f.write(f"""MIT License

Copyright (c) {year} ZeroDev

Permission is hereby granted, free of charge, to any person obtaining a copy...
""")

    # CHANGELOG
    with open(os.path.join(project_path, "CHANGELOG.md"), "w") as f:
        f.write(f"# Changelog\n\n## {datetime.today().strftime('%Y-%m-%d')}\n- Initial project generated\n")

    # Test file
    with open(os.path.join(project_path, "tests", "test_main.py"), "w") as f:
        f.write("""def test_basic():
    assert True
""")

    # CI workflow
    with open(os.path.join(project_path, ".github", "workflows", "test.yml"), "w") as f:
        f.write(f"""name: Test + Lint + Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 coverage
    - name: Lint with black
      run: black --check .
    - name: Lint with flake8
      run: flake8 .
    - name: Run tests with coverage
      run: |
        coverage run -m pytest
        coverage report
""")

    # .env.sample
    with open(os.path.join(project_path, "env.sample"), "w") as f:
        f.write("OPENAI_API_KEY=your-api-key-here\n")

    # config/validate_env.py
    with open(os.path.join(project_path, "config", "validate_env.py"), "w") as f:
        f.write("""import os

def validate_env():
    if not os.getenv("OPENAI_API_KEY"):
        raise EnvironmentError("Missing OPENAI_API_KEY environment variable!")
""")

    # pre-commit
    with open(os.path.join(project_path, ".pre-commit-config.yaml"), "w") as f:
        f.write("""repos:
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
""")

    # Dockerfile
    with open(os.path.join(project_path, "Dockerfile"), "w") as f:
        f.write(f"""FROM python:3.10

WORKDIR /app
COPY . .
RUN pip install --no-cache-dir -r requirements.txt
CMD ["python", "main.py"]
""")

    # docker-compose.yml
    with open(os.path.join(project_path, "docker-compose.yml"), "w") as f:
        f.write(f"""version: '3.8'
services:
  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    environment:
      - OPENAI_API_KEY=your-api-key-here
""")

    print("[âœ…] CI/CD scaffolding created successfully.")
